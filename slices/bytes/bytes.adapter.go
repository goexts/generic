// Code generated by adptool. DO NOT EDIT.
//
// This file is generated from bytes.go.

// Package bytes contains generated code by adptool.
package bytes

import (
	bytes "bytes"
	"iter"
	"unicode"
)

const MinRead = bytes.MinRead

var ErrTooLarge = bytes.ErrTooLarge

type (
	Buffer = bytes.Buffer
	Reader = bytes.Reader
)

func Clone(b []byte) []byte {
	return bytes.Clone(b)
}

func Compare(a, b []byte) int {
	return bytes.Compare(a, b)
}

func Contains(b, subslice []byte) bool {
	return bytes.Contains(b, subslice)
}

func ContainsAny(b []byte, chars string) bool {
	return bytes.ContainsAny(b, chars)
}

func ContainsFunc(b []byte, f func(rune) bool) bool {
	return bytes.ContainsFunc(b, f)
}

func ContainsRune(b []byte, r rune) bool {
	return bytes.ContainsRune(b, r)
}

func Count(s, sep []byte) int {
	return bytes.Count(s, sep)
}

func Cut(s, sep []byte) (before, after []byte, found bool) {
	return bytes.Cut(s, sep)
}

func CutPrefix(s, prefix []byte) (after []byte, found bool) {
	return bytes.CutPrefix(s, prefix)
}

func CutSuffix(s, suffix []byte) (before []byte, found bool) {
	return bytes.CutSuffix(s, suffix)
}

func Equal(a, b []byte) bool {
	return bytes.Equal(a, b)
}

func EqualFold(s, t []byte) bool {
	return bytes.EqualFold(s, t)
}

func Fields(s []byte) [][]byte {
	return bytes.Fields(s)
}

func FieldsFunc(s []byte, f func(rune) bool) [][]byte {
	return bytes.FieldsFunc(s, f)
}

func FieldsFuncSeq(s []byte, f func(rune) bool) iter.Seq[[]byte] {
	return bytes.FieldsFuncSeq(s, f)
}

func FieldsSeq(s []byte) iter.Seq[[]byte] {
	return bytes.FieldsSeq(s)
}

func HasPrefix(s, prefix []byte) bool {
	return bytes.HasPrefix(s, prefix)
}

func HasSuffix(s, suffix []byte) bool {
	return bytes.HasSuffix(s, suffix)
}

func Index(s, sep []byte) int {
	return bytes.Index(s, sep)
}

func IndexAny(s []byte, chars string) int {
	return bytes.IndexAny(s, chars)
}

func IndexByte(b []byte, c byte) int {
	return bytes.IndexByte(b, c)
}

func IndexFunc(s []byte, f func(r rune) bool) int {
	return bytes.IndexFunc(s, f)
}

func IndexRune(s []byte, r rune) int {
	return bytes.IndexRune(s, r)
}

func Join(s [][]byte, sep []byte) []byte {
	return bytes.Join(s, sep)
}

func LastIndex(s, sep []byte) int {
	return bytes.LastIndex(s, sep)
}

func LastIndexAny(s []byte, chars string) int {
	return bytes.LastIndexAny(s, chars)
}

func LastIndexByte(s []byte, c byte) int {
	return bytes.LastIndexByte(s, c)
}

func LastIndexFunc(s []byte, f func(r rune) bool) int {
	return bytes.LastIndexFunc(s, f)
}

func Lines(s []byte) iter.Seq[[]byte] {
	return bytes.Lines(s)
}

func Map(mapping func(r rune) rune, s []byte) []byte {
	return bytes.Map(mapping, s)
}

func NewBuffer(buf []byte) *bytes.Buffer {
	return bytes.NewBuffer(buf)
}

func NewBufferString(s string) *bytes.Buffer {
	return bytes.NewBufferString(s)
}

func NewReader(b []byte) *bytes.Reader {
	return bytes.NewReader(b)
}

func Repeat(b []byte, count int) []byte {
	return bytes.Repeat(b, count)
}

func Replace(s, old, new []byte, n int) []byte {
	return bytes.Replace(s, old, new, n)
}

func ReplaceAll(s, old, new []byte) []byte {
	return bytes.ReplaceAll(s, old, new)
}

func Runes(s []byte) []rune {
	return bytes.Runes(s)
}

func Split(s, sep []byte) [][]byte {
	return bytes.Split(s, sep)
}

func SplitAfter(s, sep []byte) [][]byte {
	return bytes.SplitAfter(s, sep)
}

func SplitAfterN(s, sep []byte, n int) [][]byte {
	return bytes.SplitAfterN(s, sep, n)
}

func SplitAfterSeq(s, sep []byte) iter.Seq[[]byte] {
	return bytes.SplitAfterSeq(s, sep)
}

func SplitN(s, sep []byte, n int) [][]byte {
	return bytes.SplitN(s, sep, n)
}

func SplitSeq(s, sep []byte) iter.Seq[[]byte] {
	return bytes.SplitSeq(s, sep)
}

func Title(s []byte) []byte {
	return bytes.Title(s)
}

func ToLower(s []byte) []byte {
	return bytes.ToLower(s)
}

func ToLowerSpecial(c unicode.SpecialCase, s []byte) []byte {
	return bytes.ToLowerSpecial(c, s)
}

func ToTitle(s []byte) []byte {
	return bytes.ToTitle(s)
}

func ToTitleSpecial(c unicode.SpecialCase, s []byte) []byte {
	return bytes.ToTitleSpecial(c, s)
}

func ToUpper(s []byte) []byte {
	return bytes.ToUpper(s)
}

func ToUpperSpecial(c unicode.SpecialCase, s []byte) []byte {
	return bytes.ToUpperSpecial(c, s)
}

func ToValidUTF8(s, replacement []byte) []byte {
	return bytes.ToValidUTF8(s, replacement)
}

func Trim(s []byte, cutset string) []byte {
	return bytes.Trim(s, cutset)
}

func TrimFunc(s []byte, f func(r rune) bool) []byte {
	return bytes.TrimFunc(s, f)
}

func TrimLeft(s []byte, cutset string) []byte {
	return bytes.TrimLeft(s, cutset)
}

func TrimLeftFunc(s []byte, f func(r rune) bool) []byte {
	return bytes.TrimLeftFunc(s, f)
}

func TrimPrefix(s, prefix []byte) []byte {
	return bytes.TrimPrefix(s, prefix)
}

func TrimRight(s []byte, cutset string) []byte {
	return bytes.TrimRight(s, cutset)
}

func TrimRightFunc(s []byte, f func(r rune) bool) []byte {
	return bytes.TrimRightFunc(s, f)
}

func TrimSpace(s []byte) []byte {
	return bytes.TrimSpace(s)
}

func TrimSuffix(s, suffix []byte) []byte {
	return bytes.TrimSuffix(s, suffix)
}
